From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marko=20Kentt=C3=A4l=C3=A4?= <marko.kenttala@jolla.com>
Date: Fri, 26 Oct 2018 11:47:24 +0300
Subject: [PATCH] Initialize secrets db on start. Fixes JB#34557

---
 libexec/libexec.pro           | 12 ++++++++++
 libexec/signon-storage-perm.c | 44 +++++++++++++++++++++++++++++++++++
 signon.pro                    |  2 +-
 src/signond/signondaemon.cpp  | 11 +++++++++
 4 files changed, 68 insertions(+), 1 deletion(-)
 create mode 100644 libexec/libexec.pro
 create mode 100644 libexec/signon-storage-perm.c

diff --git a/libexec/libexec.pro b/libexec/libexec.pro
new file mode 100644
index 0000000..260b7db
--- /dev/null
+++ b/libexec/libexec.pro
@@ -0,0 +1,12 @@
+TEMPLATE = app
+CONFIG += console
+CONFIG -= app_bundle
+CONFIG -= qt
+TARGET = signon-storage-perm
+
+INCLUDEPATH +=  ../src ../lib
+SOURCES += signon-storage-perm.c
+
+target.path = $${INSTALL_PREFIX}/usr/libexec
+
+INSTALLS += target
diff --git a/libexec/signon-storage-perm.c b/libexec/signon-storage-perm.c
new file mode 100644
index 0000000..cd41e21
--- /dev/null
+++ b/libexec/signon-storage-perm.c
@@ -0,0 +1,44 @@
+#include <stdio.h>
+#include <string.h>
+#include <error.h>
+#include <errno.h>
+#include <unistd.h>
+#include <pwd.h>
+#include <sys/stat.h>
+
+#include <stdbool.h>
+#include "signond/signond-common.h"
+
+#define PATH_LEN 256
+#define PRIVILEGED_USER "privileged"
+
+int main()
+{
+    char path[PATH_LEN];
+    // Get user home dir
+    struct passwd *pwd = getpwuid(getuid());
+    if (!pwd) {
+        error(ENOENT, ENOENT, "User id %d not found", getuid());
+    }
+    if ((strlen(pwd->pw_dir) + strlen(signonDefaultStoragePath)) > PATH_LEN) {
+        error(ENAMETOOLONG, ENAMETOOLONG, "File name too long");
+    }
+    strcpy(path, pwd->pw_dir);
+    // Skip the first ~ char
+    strcat(path, &signonDefaultStoragePath[1]);
+
+    // Get privileged user id and group
+    pwd = getpwnam(PRIVILEGED_USER);
+    if (!pwd) {
+        error(ENOENT, ENOENT, "User %s not found", PRIVILEGED_USER);
+    }
+
+    // Set permissions
+    if (chown(path, pwd->pw_uid, pwd->pw_gid)) {
+        perror("chown");
+    }
+    if (chmod(path, 0770)) {
+        perror("chmod");
+    }
+    return 0;
+}
diff --git a/signon.pro b/signon.pro
index 9d8968f..2137af8 100644
--- a/signon.pro
+++ b/signon.pro
@@ -1,7 +1,7 @@
 include( common-vars.pri )
 
 TEMPLATE  = subdirs
-SUBDIRS   = lib src server tests
+SUBDIRS   = lib src server tests libexec
 src.depends = lib
 tests.depends = lib src
 
diff --git a/src/signond/signondaemon.cpp b/src/signond/signondaemon.cpp
index 1eda2b9..b377e6b 100644
--- a/src/signond/signondaemon.cpp
+++ b/src/signond/signondaemon.cpp
@@ -352,6 +352,17 @@ SignonDaemon *SignonDaemon::instance()
         qFatal("SignonDaemon requires a QCoreApplication instance to be "
                "constructed first");
 
+    // Initialize storage
+    QString path = QString::fromLocal8Bit(signonDefaultStoragePath);
+    if (path.startsWith(QLatin1Char('~'))) {
+        path = path.replace(0, 1, QDir::homePath());
+    }
+    QDir dir;
+    dir.mkpath(path);
+    if (QProcess::execute(QLatin1String("/usr/libexec/signon-storage-perm"))) {
+        TRACE() << "Storage init failed";
+    }
+
     TRACE() << "Creating new daemon instance.";
     m_instance = new SignonDaemon(app);
     return m_instance;
-- 
2.35.1

